name: Terraform Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Specify the environment (staging or production)"
        required: true
        default: "staging"
        type: string
      action:
        description: "Specify the action (deploy or un-deploy)"
        required: true
        default: "deploy"
        type: string
  push:
    branches:
      - production
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production' || github.event.inputs.action == 'deploy'
    permissions:
      id-token: write
      contents: read

    concurrency:
      group: ${{ github.ref_name }}
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::1234567890:role/pipelines-cd-abc123
          aws-region: us-west-2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.3

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.0.0

      - name: Deploy or Un-deploy
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            if [[ "${{ github.event.inputs.action }}" == "un-deploy" ]]; then
              ENVIRONMENT=staging bash ./deploy.sh -d
            else
              ENVIRONMENT=staging bash ./deploy.sh
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            if [[ "${{ github.event.inputs.action }}" == "un-deploy" ]]; then
              ENVIRONMENT=prod bash ./deploy.sh -d
            else
              ENVIRONMENT=prod bash ./deploy.sh
            fi
          else
            echo "Invalid branch for deployment: ${{ github.ref }}"
            exit 1
          fi
